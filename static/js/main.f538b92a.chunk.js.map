{"version":3,"sources":["api/WeatherAPI.js","panels/current/CurrentLeft.jsx","panels/current/Current.jsx","components/weatherIcon/WeatherIcon.jsx","components/city/City.jsx","panels/otherCities/OtherCities.jsx","components/weekday/Weekday.jsx","panels/forecast/Forecast.jsx","App.js","serviceWorker.js","index.js"],"names":["baseUrl","process","API_KEY","fetchWeather","city","a","fetch","cities","response","json","fetchWeatherGroup","Object","values","join","data","fetchForecast","CurrentLeft","props","currentWeather","temperature","className","main","humidity","wind","Current","toLowerCase","WeatherIcon","src","weatherIcon","alt","City","onClick","onclick","name","Math","round","temp","icon","OtherCities","useState","showOthercity","setShowOtherCity","allCities","map","key","onCitySelected","href","Weekday","weekday","day","Forecast","weekdays","App","setState","state","forecast","intervalId","getWeather","bind","getWeatherGroup","getForecast","this","weatherJson","weather","speed","weatherGroupJson","list","item","forecastJason","filter","index","getWeekDay","dt","timestamp","date","Date","getDay","setInterval","prevProps","preState","clearInterval","x","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f538b92a.chunk.js","sourcesContent":["import cities from './cities.json'\n\nconst baseUrl = process.env.REACT_APP_API_URL\nconst API_KEY = process.env.REACT_APP_API_KEY\n\nexport async function fetchWeather(city) {\n  const response = await fetch(\n    `${baseUrl}weather?id=${cities[city]}&units=metric&appid=${API_KEY}`,\n  )\n  return await response.json()\n \n}\n\nexport async function fetchWeatherGroup() {\n  let response = await fetch(\n    `${baseUrl}group?id=${Object.values(cities).join(\n      ',',\n    )}&units=metric&appid=${API_KEY}`,\n  )\n  let data = await response.json()\n  return data\n}\n\nexport async function fetchForecast(city) {\n  let response = await fetch(\n    `${baseUrl}forecast?id=${cities[city]}&cnt=33&units=metric&appid=${API_KEY}`,\n  )\n  let data = await response.json()\n  return data\n}\n","import React from 'react'\nconst CurrentLeft = (props) => {\n  return (\n    <>\n      <h2>{props.currentWeather.temperature}°C</h2>\n      <div className=\"weather-main\">\n        <span>{props.currentWeather.main}</span>\n      </div>\n      <div className=\"row current-left-bottom justify-content-around\">\n        <div className=\"col-6 humidity\">\n          <span>Humidity</span>\n          <br></br>\n          <span>{props.currentWeather.humidity}</span>\n        </div>\n        <div className=\"col-6 wind\">\n          <span>WIND</span>\n          <br></br>\n          <span>{props.currentWeather.wind} K/M</span>\n        </div>\n      </div>\n    </>\n  )\n}\nexport default CurrentLeft\n","import React from 'react'\nimport CurrentLeft from './CurrentLeft'\nimport './current.css'\n\nconst Current = (props) => {\n  return (\n    <div className={`jr_current-weather ${props.city.toLowerCase()}`}>\n      <div className=\"row\">\n        <div className=\"col-lg-6 order-lg-last current-right\">\n          <span> {props.city} </span>\n        </div>\n        <div className=\"col-lg-6 order-lg-first current-left\">\n          <CurrentLeft currentWeather={props.currentWeather} />\n        </div>\n      </div>\n      <div className=\"bottom-strip\"></div>\n    </div>\n  )\n}\nexport default Current\n","import React from 'react'\n\nconst WeatherIcon = (props) => (\n  <img\n    className=\"city-weather\"\n    src={'https://openweathermap.org/img/wn/' + props.weatherIcon + '.png'}\n    alt=\"weather picture\"\n  />\n)\nexport default WeatherIcon\n","import React from 'react'\nimport WeatherIcon from '../weatherIcon/WeatherIcon'\nconst City = (props) => {\n  return (\n    <div\n      onClick={() => props.onclick(props.city.name)}\n      className=\"row justify-content-space-around\"\n    >\n      <div className=\"col-4\">{props.city.name}</div>\n      <div className=\"col-2\">{Math.round(props.city.temp)}°C</div>\n      <div className=\"col-3\">\n        <WeatherIcon weatherIcon={props.city.icon} />\n      </div>\n    </div>\n  )\n}\nexport default City\n","import React from 'react'\nimport './otherCities.css'\nimport City from '../.././components/city/City'\nimport { useState } from 'react'\nconst OtherCities = (props) => {\n  const [showOthercity, setShowOtherCity] = useState(false)\n  const handleClick = () => {\n    setShowOtherCity(!showOthercity)\n  }\n\n  return (\n    <div className=\"jr_other-cities\">\n      <div className={showOthercity ? '' : 'd-none d-lg-block'}>\n        <h4>Other Cities</h4>\n        <ul>\n          {props.allCities.map((city) => (\n            <li key={city.name}>\n              <City city={city} onclick={props.onCitySelected} />\n            </li>\n          ))}\n        </ul>\n      </div>\n      <div className=\"d-lg-none\">\n        <a onClick={handleClick} href=\"#\">\n          {showOthercity ? 'hide other cities' : 'show other cities'}\n        </a>\n      </div>\n    </div>\n  )\n}\nexport default OtherCities\n","import React from 'react'\nimport WeatherIcon from '../weatherIcon/WeatherIcon'\nconst Weekday = (props) => (\n  <ul>\n    <li>{props.weekday.day}</li>\n    <li>{Math.round(props.weekday.temp)}°C</li>\n    <li>\n      <WeatherIcon weatherIcon={props.weekday.icon} />\n    </li>\n  </ul>\n)\n\nexport default Weekday\n","import React from 'react'\nimport Weekday from '../../components/weekday/Weekday'\nimport './forecast.css'\nconst Forecast = (props) => {\n  return (\n    <div className=\"jr_forecast\">\n      <h3>Forecast</h3>\n      <div className=\"row justify-content-between\">\n        {props.weekdays.map((weekday) => (\n          <div className=\"col-2\" key={weekday.day}>\n            <Weekday weekday={weekday} />\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Forecast\n","import React from 'react'\nimport {\n  fetchWeather,\n  fetchWeatherGroup,\n  fetchForecast,\n} from './api/WeatherAPI'\nimport Current from './panels/current/Current'\nimport './App.css'\nimport OtherCities from './panels/otherCities/OtherCities'\nimport Forecast from './panels/forecast/Forecast'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      city: 'Melbourne',\n      currentWeather: {\n        temperature: '',\n        main: '',\n        humidity: '',\n        wind: '',\n      },\n      allCities: [],\n      forecast: [],\n      intervalId:null,\n    }\n    this.getWeather = this.getWeather.bind(this)\n    this.getWeatherGroup = this.getWeatherGroup.bind(this)\n    this.getForecast = this.getForecast.bind(this)\n  }\n\n  async getWeather() {\n    const weatherJson = await fetchWeather(this.state.city)\n    const currentWeather = {\n      temperature: weatherJson.main.temp,\n      main: weatherJson.weather[0].main,\n      humidity: weatherJson.main.humidity,\n      wind: weatherJson.wind.speed,\n    }\n    this.setState({ currentWeather })\n  }\n\n  async getWeatherGroup() {\n    const weatherGroupJson = await fetchWeatherGroup()\n    const allCities = weatherGroupJson.list.map((item) => ({\n      name: item.name,\n      temp: item.main.temp,\n      icon: item.weather[0].icon,\n    }))\n    this.setState({ allCities })\n  }\n\n  async getForecast() {\n    const forecastJason = await fetchForecast(this.state.city)\n    const forecast = forecastJason.list\n      .filter((item, index) => index % 8 === 0)\n      .map((item) => ({\n        day: this.getWeekDay(item.dt),\n        temp: item.main.temp,\n        icon: item.weather[0].icon,\n      }))\n    this.setState({ forecast })\n  }\n\n  getWeekDay(timestamp) {\n    const date = new Date(timestamp * 1000)\n    let weekday = []\n    weekday[0] = 'SUN'\n    weekday[1] = 'MON'\n    weekday[2] = 'TUE'\n    weekday[3] = 'WED'\n    weekday[4] = 'THU'\n    weekday[5] = 'FRI'\n    weekday[6] = 'SAT'\n    return weekday[date.getDay()]\n  }\n\n  componentDidMount() {\n    this.getWeather()\n    this.getWeatherGroup()\n    this.getForecast()\n    const intervalId = setInterval(() => {\n      this.getWeather()\n    }, 60000)\n    this.setState({intervalId:intervalId})\n  }\n \n\n  componentDidUpdate(prevProps, preState) {\n    if (this.state.city !== preState.city) {\n      this.getWeather()\n      this.getForecast()\n    }\n  }\n\n  componentWillUnmount(){\n    clearInterval(this.state.intervalId)\n  }\n\n  onCitySelected = (name) => {\n    this.setState({ city: name })\n  }\n\n  render() {\n    return (\n      <div className=\"jr_container\">\n        <div className=\"jr_card\">\n          <Current\n            city={this.state.city}\n            currentWeather={this.state.currentWeather}\n          />\n\n          <div className=\"row jr_bottom\">\n            <div className=\"col-lg-5 order-last order-lg-first\">\n              <OtherCities\n                allCities={this.state.allCities.filter(\n                  (x) => x.name !== this.state.city,\n                )}\n                onCitySelected={this.onCitySelected}\n              />\n            </div>\n            <div className=\"col-lg-7 oder-first order-lg-last\">\n              <Forecast weekdays={this.state.forecast} />\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}